{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maxgs\\\\Documents\\\\Programa\\xE7\\xE3o\\\\BD\\\\cine-recomenda-ui\\\\src\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './HomePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const [filmes, setFilmes] = useState([]);\n  const [minhaListaIds, setMinhaListaIds] = useState(new Set());\n  const idUsuario = 1; // Usando o ID 1 como exemplo fixo\n\n  // useEffect para carregar todos os dados necessários quando a página abre\n  useEffect(() => {\n    async function carregarDados() {\n      try {\n        // Usamos Promise.all para fazer as duas buscas ao mesmo tempo\n        const [responseFilmes, responseLista] = await Promise.all([fetch('http://localhost:8080/filmes'), fetch(`http://localhost:8080/listas/usuario/${idUsuario}`)]);\n        if (!responseFilmes.ok || !responseLista.ok) {\n          throw new Error('Falha em uma das requisições para a API');\n        }\n        const dataFilmes = await responseFilmes.json();\n        const dataLista = await responseLista.json();\n\n        // Extrai os IDs dos filmes da lista do usuário e guarda em um Set\n        const ids = new Set(dataLista.map(item => item.filme.idFilme));\n        setFilmes(dataFilmes);\n        setMinhaListaIds(ids);\n      } catch (error) {\n        console.error(\"Falha ao carregar dados da página inicial:\", error);\n        alert(\"Não foi possível carregar os dados. Verifique o console para mais detalhes.\");\n      }\n    }\n    carregarDados();\n  }, [idUsuario]); // A dependência garante que se o idUsuario mudar, os dados recarregam\n\n  // Função para adicionar um filme à lista do usuário\n  const handleAdicionarNaLista = async idFilme => {\n    const dados = {\n      idUsuario,\n      idFilme,\n      estado: \"Quero Assistir\"\n    };\n    try {\n      const response = await fetch('http://localhost:8080/listas', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dados)\n      });\n      if (response.ok) {\n        alert('Filme adicionado à sua lista!');\n        // Atualiza o estado local para o botão mudar na hora\n        setMinhaListaIds(prevIds => new Set(prevIds).add(idFilme));\n      } else {\n        alert('Erro ao adicionar filme à lista.');\n      }\n    } catch (error) {\n      console.error(\"Erro de conexão:\", error);\n    }\n  };\n\n  // Função para remover um filme da lista do usuário\n  const handleRemoverDaLista = async idFilme => {\n    try {\n      const response = await fetch(`http://localhost:8080/listas?idUsuario=${idUsuario}&idFilme=${idFilme}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        alert('Filme removido da sua lista.');\n        // Atualiza o estado local para o botão mudar na hora\n        setMinhaListaIds(prevIds => {\n          const novosIds = new Set(prevIds);\n          novosIds.delete(idFilme);\n          return novosIds;\n        });\n      } else {\n        alert('Erro ao remover filme da lista.');\n      }\n    } catch (error) {\n      console.error(\"Erro de conexão:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"homepage-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CineRecomenda\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sua lista de filmes definitiva.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"movie-grid\",\n      children: filmes.map(filme => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/filmes/${filme.idFilme}`,\n          className: \"movie-card-link\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: filme.nome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Lan\\xE7amento:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 28\n          }, this), \" \", new Date(filme.anoLanc).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dura\\xE7\\xE3o:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 28\n          }, this), \" \", filme.duracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this), minhaListaIds.has(filme.idFilme) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"na-lista-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"na-lista-texto\",\n            children: \"\\u2714 Na sua Lista\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoverDaLista(filme.idFilme),\n            className: \"remove-list-button\",\n            children: \"Remover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAdicionarNaLista(filme.idFilme),\n          className: \"add-list-button\",\n          children: \"Adicionar \\xE0 Lista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this)]\n      }, filme.idFilme, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(HomePage, \"3nF13rkSz4HRRucClLDgTPjx0V8=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","HomePage","_s","filmes","setFilmes","minhaListaIds","setMinhaListaIds","Set","idUsuario","carregarDados","responseFilmes","responseLista","Promise","all","fetch","ok","Error","dataFilmes","json","dataLista","ids","map","item","filme","idFilme","error","console","alert","handleAdicionarNaLista","dados","estado","response","method","headers","body","JSON","stringify","prevIds","add","handleRemoverDaLista","novosIds","delete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","nome","Date","anoLanc","toLocaleDateString","duracao","has","onClick","_c","$RefreshReg$"],"sources":["C:/Users/maxgs/Documents/Programação/BD/cine-recomenda-ui/src/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n    const [filmes, setFilmes] = useState([]);\r\n    const [minhaListaIds, setMinhaListaIds] = useState(new Set());\r\n    const idUsuario = 1; // Usando o ID 1 como exemplo fixo\r\n\r\n    // useEffect para carregar todos os dados necessários quando a página abre\r\n    useEffect(() => {\r\n        async function carregarDados() {\r\n            try {\r\n                // Usamos Promise.all para fazer as duas buscas ao mesmo tempo\r\n                const [responseFilmes, responseLista] = await Promise.all([\r\n                    fetch('http://localhost:8080/filmes'),\r\n                    fetch(`http://localhost:8080/listas/usuario/${idUsuario}`)\r\n                ]);\r\n\r\n                if (!responseFilmes.ok || !responseLista.ok) {\r\n                    throw new Error('Falha em uma das requisições para a API');\r\n                }\r\n\r\n                const dataFilmes = await responseFilmes.json();\r\n                const dataLista = await responseLista.json();\r\n\r\n                // Extrai os IDs dos filmes da lista do usuário e guarda em um Set\r\n                const ids = new Set(dataLista.map(item => item.filme.idFilme));\r\n\r\n                setFilmes(dataFilmes);\r\n                setMinhaListaIds(ids);\r\n\r\n            } catch (error) {\r\n                console.error(\"Falha ao carregar dados da página inicial:\", error);\r\n                alert(\"Não foi possível carregar os dados. Verifique o console para mais detalhes.\");\r\n            }\r\n        }\r\n\r\n        carregarDados();\r\n    }, [idUsuario]); // A dependência garante que se o idUsuario mudar, os dados recarregam\r\n\r\n    // Função para adicionar um filme à lista do usuário\r\n    const handleAdicionarNaLista = async (idFilme) => {\r\n        const dados = { idUsuario, idFilme, estado: \"Quero Assistir\" };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/listas', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(dados)\r\n            });\r\n            if (response.ok) {\r\n                alert('Filme adicionado à sua lista!');\r\n                // Atualiza o estado local para o botão mudar na hora\r\n                setMinhaListaIds(prevIds => new Set(prevIds).add(idFilme));\r\n            } else {\r\n                alert('Erro ao adicionar filme à lista.');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro de conexão:\", error);\r\n        }\r\n    };\r\n\r\n    // Função para remover um filme da lista do usuário\r\n    const handleRemoverDaLista = async (idFilme) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/listas?idUsuario=${idUsuario}&idFilme=${idFilme}`, {\r\n                method: 'DELETE'\r\n            });\r\n            if (response.ok) {\r\n                alert('Filme removido da sua lista.');\r\n                // Atualiza o estado local para o botão mudar na hora\r\n                setMinhaListaIds(prevIds => {\r\n                    const novosIds = new Set(prevIds);\r\n                    novosIds.delete(idFilme);\r\n                    return novosIds;\r\n                });\r\n            } else {\r\n                alert('Erro ao remover filme da lista.');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro de conexão:\", error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"homepage-container\">\r\n            <header className=\"homepage-header\">\r\n                <h1>CineRecomenda</h1>\r\n                <p>Sua lista de filmes definitiva.</p>\r\n            </header>\r\n\r\n            <main className=\"movie-grid\">\r\n                {filmes.map(filme => (\r\n                    <div key={filme.idFilme} className=\"movie-card\">\r\n                        <Link to={`/filmes/${filme.idFilme}`} className=\"movie-card-link\">\r\n                            <h2>{filme.nome}</h2>\r\n                        </Link>\r\n                        <p><strong>Lançamento:</strong> {new Date(filme.anoLanc).toLocaleDateString()}</p>\r\n                        <p><strong>Duração:</strong> {filme.duracao}</p>\r\n                        \r\n                        {minhaListaIds.has(filme.idFilme) ? (\r\n                            <div className=\"na-lista-container\">\r\n                                <span className=\"na-lista-texto\">✔ Na sua Lista</span>\r\n                                <button onClick={() => handleRemoverDaLista(filme.idFilme)} className=\"remove-list-button\">\r\n                                    Remover\r\n                                </button>\r\n                            </div>\r\n                        ) : (\r\n                            <button onClick={() => handleAdicionarNaLista(filme.idFilme)} className=\"add-list-button\">\r\n                                Adicionar à Lista\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}