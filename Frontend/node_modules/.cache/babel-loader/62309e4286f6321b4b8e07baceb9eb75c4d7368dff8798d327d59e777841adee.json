{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maxgs\\\\Documents\\\\Programa\\xE7\\xE3o\\\\BD\\\\cine-recomenda-ui\\\\src\\\\HomePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport './HomePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HomePage() {\n  _s();\n  const [filmes, setFilmes] = useState([]);\n  // --- NOVO ESTADO ---\n  // Usaremos um Set para guardar os IDs dos filmes que estão na lista do usuário.\n  // Um Set é eficiente para verificar se um item existe (com .has()).\n  const [minhaListaIds, setMinhaListaIds] = useState(new Set());\n  const idUsuario = 1; // Exemplo com usuário de ID 1\n\n  // --- useEffect ATUALIZADO ---\n  // Agora ele busca tanto a lista de todos os filmes quanto a lista pessoal do usuário.\n  useEffect(() => {\n    // Busca todos os filmes\n    fetch('http://localhost:8080/filmes').then(response => response.json()).then(data => setFilmes(data)).catch(error => console.error(\"Erro ao buscar filmes:\", error));\n\n    // Busca a lista pessoal do usuário para saber quais IDs já foram adicionados\n    fetch(`http://localhost:8080/listas/usuario/${idUsuario}`).then(response => response.json()).then(data => {\n      // Extrai apenas os IDs dos filmes e os coloca no nosso Set\n      const ids = new Set(data.map(item => item.filme.idFilme));\n      setMinhaListaIds(ids);\n    }).catch(error => console.error(\"Erro ao buscar a lista do usuário:\", error));\n  }, [idUsuario]);\n\n  // --- FUNÇÃO DE ADICIONAR ATUALIZADA ---\n  const handleAdicionarNaLista = async idFilme => {\n    const dados = {\n      idUsuario: idUsuario,\n      idFilme: idFilme,\n      estado: \"Quero Assistir\"\n    };\n    try {\n      const response = await fetch('http://localhost:8080/listas', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dados)\n      });\n      if (response.ok) {\n        alert('Filme adicionado à sua lista com sucesso!');\n        // ATUALIZA O ESTADO LOCALMENTE para dar feedback instantâneo!\n        setMinhaListaIds(prevIds => new Set(prevIds).add(idFilme));\n      } else {\n        alert('Erro ao adicionar filme à lista.');\n      }\n    } catch (error) {\n      console.error(\"Erro de conexão:\", error);\n      alert('Não foi possível conectar ao servidor.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homepage-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"homepage-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"movie-grid\",\n      children: filmes.map(filme => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: `/filmes/${filme.idFilme}`,\n          className: \"movie-card-link\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: filme.nome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Lan\\xE7amento:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 28\n          }, this), \" \", new Date(filme.anoLanc).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dura\\xE7\\xE3o:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 28\n          }, this), \" \", filme.duracao]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this), minhaListaIds.has(filme.idFilme) ?\n        /*#__PURE__*/\n        // Se o ID do filme JÁ ESTÁ na lista, mostra o botão desabilitado\n        _jsxDEV(\"button\", {\n          className: \"add-list-button\",\n          disabled: true,\n          children: \"Na sua Lista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this) :\n        /*#__PURE__*/\n        // Se NÃO ESTÁ na lista, mostra o botão para adicionar\n        _jsxDEV(\"button\", {\n          onClick: () => handleAdicionarNaLista(filme.idFilme),\n          className: \"add-list-button\",\n          children: \"Adicionar \\xE0 Lista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)]\n      }, filme.idFilme, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(HomePage, \"3nF13rkSz4HRRucClLDgTPjx0V8=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","HomePage","_s","filmes","setFilmes","minhaListaIds","setMinhaListaIds","Set","idUsuario","fetch","then","response","json","data","catch","error","console","ids","map","item","filme","idFilme","handleAdicionarNaLista","dados","estado","method","headers","body","JSON","stringify","ok","alert","prevIds","add","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","nome","Date","anoLanc","toLocaleDateString","duracao","has","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/maxgs/Documents/Programação/BD/cine-recomenda-ui/src/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './HomePage.css';\r\n\r\nfunction HomePage() {\r\n    const [filmes, setFilmes] = useState([]);\r\n    // --- NOVO ESTADO ---\r\n    // Usaremos um Set para guardar os IDs dos filmes que estão na lista do usuário.\r\n    // Um Set é eficiente para verificar se um item existe (com .has()).\r\n    const [minhaListaIds, setMinhaListaIds] = useState(new Set());\r\n    const idUsuario = 1; // Exemplo com usuário de ID 1\r\n\r\n    // --- useEffect ATUALIZADO ---\r\n    // Agora ele busca tanto a lista de todos os filmes quanto a lista pessoal do usuário.\r\n    useEffect(() => {\r\n        // Busca todos os filmes\r\n        fetch('http://localhost:8080/filmes')\r\n            .then(response => response.json())\r\n            .then(data => setFilmes(data))\r\n            .catch(error => console.error(\"Erro ao buscar filmes:\", error));\r\n\r\n        // Busca a lista pessoal do usuário para saber quais IDs já foram adicionados\r\n        fetch(`http://localhost:8080/listas/usuario/${idUsuario}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // Extrai apenas os IDs dos filmes e os coloca no nosso Set\r\n                const ids = new Set(data.map(item => item.filme.idFilme));\r\n                setMinhaListaIds(ids);\r\n            })\r\n            .catch(error => console.error(\"Erro ao buscar a lista do usuário:\", error));\r\n    }, [idUsuario]);\r\n\r\n    // --- FUNÇÃO DE ADICIONAR ATUALIZADA ---\r\n    const handleAdicionarNaLista = async (idFilme) => {\r\n        const dados = {\r\n            idUsuario: idUsuario,\r\n            idFilme: idFilme,\r\n            estado: \"Quero Assistir\"\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8080/listas', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(dados)\r\n            });\r\n\r\n            if (response.ok) {\r\n                alert('Filme adicionado à sua lista com sucesso!');\r\n                // ATUALIZA O ESTADO LOCALMENTE para dar feedback instantâneo!\r\n                setMinhaListaIds(prevIds => new Set(prevIds).add(idFilme));\r\n            } else {\r\n                alert('Erro ao adicionar filme à lista.');\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Erro de conexão:\", error);\r\n            alert('Não foi possível conectar ao servidor.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"homepage-container\">\r\n            <header className=\"homepage-header\">\r\n                {/* ... seu header ... */}\r\n            </header>\r\n\r\n            <main className=\"movie-grid\">\r\n                {filmes.map(filme => (\r\n                    <div key={filme.idFilme} className=\"movie-card\">\r\n                        <Link to={`/filmes/${filme.idFilme}`} className=\"movie-card-link\">\r\n                            <h2>{filme.nome}</h2>\r\n                        </Link>\r\n                        <p><strong>Lançamento:</strong> {new Date(filme.anoLanc).toLocaleDateString()}</p>\r\n                        <p><strong>Duração:</strong> {filme.duracao}</p>\r\n                        \r\n                        {/* --- LÓGICA CONDICIONAL DO BOTÃO --- */}\r\n                        {minhaListaIds.has(filme.idFilme) ? (\r\n                            // Se o ID do filme JÁ ESTÁ na lista, mostra o botão desabilitado\r\n                            <button className=\"add-list-button\" disabled>\r\n                                Na sua Lista\r\n                            </button>\r\n                        ) : (\r\n                            // Se NÃO ESTÁ na lista, mostra o botão para adicionar\r\n                            <button onClick={() => handleAdicionarNaLista(filme.idFilme)} className=\"add-list-button\">\r\n                                Adicionar à Lista\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}